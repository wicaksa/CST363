-- hw5.sql
-- Student: Wicaksa Munajat
-- Date: 06/12/2021
-- Class: CST 363 Intro to Database Design
-- Instructor: David Wisneski
-- School: CSUMB CS Online Summer '21


-- 1). Mapping of production to warehouse tables and columns

-- 1a.	Invoice table -> timeline table: 
-- The invoice table data was transformed into the timeline table of HSD-DW database. 
-- This new table re-organized the incoming data which was a table containing a list of 
-- invoices with a pk of invoice number into a table that separated the invoices into different times 
-- depending on when the invoices occurred. It has a primary key of timeid and columns date, monthid, 
-- monthtext, quartered, quartertext, and year in order to analyze data depending on the time of purchase.

-- 1b. HSD Customer -> HSD-DW Customer: This transformation transforms the incoming data and condenses it 
-- into just customerid, customername, emaildomain, phoneareacode, city, state, and zip. Customer name is now 
-- in one column containing first and last name, and phoneareacode now contains just the area code. The customerâ€™s 
-- password and street address were left off. 

-- 1c. HSD Product -> HSD-DW Product: The Product Table from HSD was transformed into a new Product Table that 
-- contains less columns. It now only contains productnumber, producttype, and the productname which was changed 
-- from product description of the HSD Product table. 

-- 1d. Product_Sales: Combines data from HSD invoice and HSD line_item tables. This new table has columns timeid, 
-- customerid, productnumber, quantity, unitprice, and total. The last three columns were generated by aggregate 
-- functions using data from the HSD line_item table.  

-- 2). Load data for table SALES_FOR_RFM.  
INSERT INTO hsddw.sales_for_rfm (timeid, customerid, invoicenumber, pretaxtotalsales) 
SELECT DISTINCT c.timeid, a.customerid, a.invoicenumber, (a.subtotal + a.shipping)
FROM  hsd.invoice a, hsd.line_item b, hsddw.timeline c  
WHERE a.invoicenumber = b.invoicenumber and a.invoicedate = c.date;

-- 3). Create view of total dollar amount of each product for each year. 

-- SELECT p.ProductNumber, p.ProductName, t.Year, SUM(ps.Total) AS TotalSales
-- FROM customer c, product_sales ps, product p,timeline t
-- WHERE c.CustomerId = ps.CustomerID AND 
-- 	     p.ProductNumber = ps.ProductNumber AND 
--       t.TimeId = ps.TimeID
-- GROUP BY p.ProductNumber, p.ProductName, t.Year
-- ORDER BY p.ProductNumber;

CREATE VIEW totalProductSalesPerYear AS 
SELECT p.ProductNumber, p.ProductName, t.Year, SUM(ps.Total) AS TotalSales
FROM customer c, product_sales ps, product p,timeline t
WHERE c.CustomerId = ps.CustomerID AND 
	  p.ProductNumber = ps.ProductNumber AND 
      t.TimeId = ps.TimeID
GROUP BY p.ProductNumber, p.ProductName, t.Year
ORDER BY p.ProductNumber; 

-- 4). Populate the product_sales table with the new payment_id column.

-- NOTES: 
-- 1. add PK payment_type_id to product_sales

INSERT INTO hsddw.product_sales (payment_id, timeid, customerid, productnumber, quantity, unitprice, total) 
SELECT p.payment_type_id, c.timeid, a.customerid, b.productnumber, sum(b.quantity), min(b.unitprice), sum(b.total)
FROM  hsd.invoice a, hsd.line_item b, hsddw.timeline c, hsddw.payment_type p
WHERE a.invoicenumber = b.invoicenumber AND 
      a.invoicedate = c.date AND
      a.paymenttype = p.payment_type
GROUP BY c.timeid, a.customerid, b.productnumber, p.payment_type_id;
